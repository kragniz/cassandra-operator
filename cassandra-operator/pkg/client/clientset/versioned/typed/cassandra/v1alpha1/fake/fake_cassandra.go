// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/sky-uk/cassandra-operator/cassandra-operator/pkg/apis/cassandra/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeCassandras implements CassandraInterface
type FakeCassandras struct {
	Fake *FakeCoreV1alpha1
	ns   string
}

var cassandrasResource = schema.GroupVersionResource{Group: "core.sky.uk", Version: "v1alpha1", Resource: "cassandras"}

var cassandrasKind = schema.GroupVersionKind{Group: "core.sky.uk", Version: "v1alpha1", Kind: "Cassandra"}

// Get takes name of the cassandra, and returns the corresponding cassandra object, and an error if there is any.
func (c *FakeCassandras) Get(name string, options v1.GetOptions) (result *v1alpha1.Cassandra, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(cassandrasResource, c.ns, name), &v1alpha1.Cassandra{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Cassandra), err
}

// List takes label and field selectors, and returns the list of Cassandras that match those selectors.
func (c *FakeCassandras) List(opts v1.ListOptions) (result *v1alpha1.CassandraList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(cassandrasResource, cassandrasKind, c.ns, opts), &v1alpha1.CassandraList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.CassandraList{ListMeta: obj.(*v1alpha1.CassandraList).ListMeta}
	for _, item := range obj.(*v1alpha1.CassandraList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested cassandras.
func (c *FakeCassandras) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(cassandrasResource, c.ns, opts))

}

// Create takes the representation of a cassandra and creates it.  Returns the server's representation of the cassandra, and an error, if there is any.
func (c *FakeCassandras) Create(cassandra *v1alpha1.Cassandra) (result *v1alpha1.Cassandra, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(cassandrasResource, c.ns, cassandra), &v1alpha1.Cassandra{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Cassandra), err
}

// Update takes the representation of a cassandra and updates it. Returns the server's representation of the cassandra, and an error, if there is any.
func (c *FakeCassandras) Update(cassandra *v1alpha1.Cassandra) (result *v1alpha1.Cassandra, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(cassandrasResource, c.ns, cassandra), &v1alpha1.Cassandra{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Cassandra), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeCassandras) UpdateStatus(cassandra *v1alpha1.Cassandra) (*v1alpha1.Cassandra, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(cassandrasResource, "status", c.ns, cassandra), &v1alpha1.Cassandra{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Cassandra), err
}

// Delete takes name of the cassandra and deletes it. Returns an error if one occurs.
func (c *FakeCassandras) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(cassandrasResource, c.ns, name), &v1alpha1.Cassandra{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeCassandras) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(cassandrasResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.CassandraList{})
	return err
}

// Patch applies the patch and returns the patched cassandra.
func (c *FakeCassandras) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Cassandra, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(cassandrasResource, c.ns, name, pt, data, subresources...), &v1alpha1.Cassandra{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Cassandra), err
}
